define(["core/Logger","core/CoreAPI"],function(Logger,API){return API.Class.create({id:null,items:{},itemStorageKeys:{},numItems:0,idCounter:0,Model:null,load:function(id,callback){var self=this,key=this.getStorageKey(id);this.id=id,API.Storage.get(key,function(data){self.hydrate(data),API.Storage.get(self.itemStorageKeys,function(data){for(var key in data)if(data.hasOwnProperty(key)){var thisModel=self.create(data[key]);self.add(thisModel,self.itemStorageKeys[key])}"function"==typeof callback&&callback(self)})})},save:function(storageBucket,callback){if(!this.id)throw new Error("["+this.originator+".save()] Collection must have an id before being saved");var self=this,data={},key=this.getStorageKey();this.each(function(item,id){var itemKey=self.getItemStorageKey(id);data[itemKey]=item.dehydrate()}),data[key]=this.dehydrate(),API.Storage.set(data,callback,storageBucket)},create:function(data){if(!this.Model){var componentName=this.getComponentName();if(this.Model=API.Component.getClass(componentName,"Model"),!this.Model)throw new Error("["+this.originator+".load()] Could not load "+componentName+"Model class")}var model=new this.Model;return data&&model.hydrate(data),model},getStorageKey:function(id){return id=id||this.id,this.getClassName()+"_"+id},getItemStorageKey:function(id){return this.getClassName()+"_item_"+id},dehydrate:function(){var data={},ignore={items:!0,numItems:!0};for(var prop in this)this.hasOwnProperty(prop)&&("function"==typeof this[prop]||prop in ignore||(data[prop]=this[prop]));return data},hydrate:function(data){for(var prop in data)data.hasOwnProperty(prop)&&(this[prop]=data[prop])},add:function(item,id){"undefined"==typeof id&&(id="object"==typeof item&&null!==item?item.id:this.getNextID()),id in this.items||(this.numItems+=1),this.items[id]=item;var key=this.getItemStorageKey(id);return this.itemStorageKeys[key]=id,id},remove:function(id){this.has(id)&&(delete this.items[id],delete this.itemStorageKeys[id],this.numItems-=1)},has:function(id){return id in this.items},get:function(id){return this.has(id)?this.items[id]:null},getMany:function(ids){for(var many={},i=0;i<ids.length;i++)many[ids[i]]=this.get(ids[i]);return many},each:function(callback){for(var id in this.items)if(this.items.hasOwnProperty(id)){var result=callback(this.items[id],id);if(result===!1)break}},getAll:function(){return this.items},count:function(){return this.numItems},isEmpty:function(){return 0===this.numItems},clear:function(){this.items={},this.itemStorageKeys={},this.numItems=0},getNextID:function(){return this.idCounter+=1,this.has(this.idCounter)?this.getNextID():this.idCounter}})});