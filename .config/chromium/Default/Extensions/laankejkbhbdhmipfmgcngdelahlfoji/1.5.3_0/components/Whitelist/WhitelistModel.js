define(["core/Logger","core/CoreAPI","components/List/ListModel"],function(Logger,API,ListModel){return API.Class.extend(ListModel,{add:function(domain,skipSave,silent){if(API.StayFocusd.isMaxTimeAllowedExceeded()){var blacklist=API.Component.get("Blacklist","blacklist");if(blacklist.model.has(domain))return alert(API.Chrome.Translation.get("cannotAllowBlockedSiteOnceTimeIsUp")),!1;if(domain.indexOf("*")>-1)return alert(API.Chrome.Translation.get("cannotAllowSitesUsingWildcardsOnceTimeIsUp")),!1}return API.NuclearOption.isActive()?(alert(API.Chrome.Translation.get("cannotAddAllowedSitesDuringNuclearOption")),!1):this._parent.add(domain,skipSave,silent)},addListeners:function(){var self=this;this._parent.addListeners(),API.PubSub.listen("Settings.data.refreshed",function(message,payload){payload.changes.whitelist&&self.load()})}})});