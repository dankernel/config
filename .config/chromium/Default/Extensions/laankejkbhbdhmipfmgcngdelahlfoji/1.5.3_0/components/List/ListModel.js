define(["core/Logger","core/CoreAPI"],function(Logger,API){return API.Class.create({descriptor:null,list:null,init:function(){var instanceName=this.getInstanceName()||"";this.isSyncDisabled()?API.Storage.setBucket(instanceName,"LOCAL",!0):API.Storage.setBucket(instanceName,"SYNC",!0),this.descriptor=instanceName.toUpperCase(),this.addListeners()},load:function(onLoaded){this.list=API.Settings.get(this.getInstanceName()),API.Object.isObjLiteral(this.list)||(this.list={}),"object"==typeof this.list[""]&&(delete this.list[""],this.save()),this.list=API.Object.sort(this.list),"function"==typeof onLoaded&&onLoaded(this.list),API.PubSub.publish(this.getClassName()+".list.loaded."+this.descriptor,{list:this.list})},save:function(onSaved){var self=this,obj={};obj[this.getInstanceName()]=API.Object.sort(this.list),API.Settings.set(obj,function(){"function"==typeof onSaved&&onSaved(self.list),API.PubSub.publish(self.getClassName()+".list.saved."+self.descriptor,{list:self.list})})},add:function(domain,skipSave,silent){if(API.Utils.isEmpty(domain))return!1;if(!this.list)throw new Error("["+this.getClassName()+".add()] Must load model before adding domains");return this.list[domain]={},this.list=this.clean(domain),skipSave||this.save(),silent||API.PubSub.publish(this.getClassName()+".domain.added."+this.descriptor,{domain:domain,list:this.list}),!0},addMany:function(domains){if(!API.Object.isArray(domains))throw new Error("["+this.getClassName()+".addMany()] Domains must be in an array");for(var addedDomains=[],i=0;i<domains.length;i++){var added=this.add(domains[i],!0,!0);added&&addedDomains.push(domains[i])}this.save(),API.PubSub.publish(this.getClassName()+".domains.added."+this.descriptor,{domains:addedDomains,list:this.list})},remove:function(domain,skipSave,silent){return domain in this.list?(delete this.list[domain],skipSave||this.save(),silent||API.PubSub.publish(this.getClassName()+".domain.removed."+this.descriptor,{domain:domain,list:this.list}),!0):!1},removeMany:function(domains){if(!API.Object.isArray(domains))throw new Error("["+this.getClassName()+".removeMany()] Domains must be in an array");for(var removedDomains=[],i=0;i<domains.length;i++){var removed=this.remove(domains[i],!0,!0);removed&&removedDomains.push(domains[i])}this.save(),API.PubSub.publish(this.getClassName()+".domains.removed."+this.descriptor,{domains:removedDomains,list:this.list})},get:function(asObject){if(asObject)return this.list;var list=[];for(var domain in this.list)this.list.hasOwnProperty(domain)&&list.push(domain);return list.sort(),list},find:function(domainToFind){for(var domainInList in this.list)if(this.list.hasOwnProperty(domainInList)){if(API.Domain.isMoreGeneralURL(domainInList,domainToFind))return domainInList;if(0===domainInList.indexOf("*")&&API.Domain.matchesWildcard(domainInList,domainToFind))return domainInList}return!1},has:function(domain){return!(this.find(domain)===!1)},clear:function(){this.list={},this.save(),API.PubSub.publish(this.getClassName()+".list.cleared."+this.descriptor,{list:this.list})},clean:function(domain){var cleanList={};for(var anyDomain in this.list)if(this.list.hasOwnProperty(anyDomain)){var inCleanList=!1;for(var cleanDomain in cleanList)cleanList.hasOwnProperty(cleanDomain)&&(anyDomain===cleanDomain||API.Domain.isMoreGeneralURL(cleanDomain,anyDomain))&&(inCleanList=!0);if(inCleanList===!0)continue;API.Domain.isMoreGeneralURL(domain,anyDomain)?cleanList[domain]={}:API.Utils.isEmpty(anyDomain)||(cleanList[anyDomain]={})}return cleanList},mergeLocalWithSynced:function(onMerged){var self=this;API.Storage.merge(this.getInstanceName(),"SYNC","LOCAL",function(){self.load(onMerged)})},isSyncDisabled:function(){return API.Settings.get("disableSync")===!0},addListeners:function(){var self=this,instanceName=this.getInstanceName();API.PubSub.listen("*.domain.added",function(message,payload){message.matches("*.domain.added."+self.descriptor)||self.remove(payload.domain)}),API.PubSub.listen("*.domains.added",function(message,payload){message.matches("*.domains.added."+self.descriptor)||self.removeMany(payload.domains)}),API.PubSub.listen("*.checkbox.toggle.DISABLE_SYNC",function(message,payload){payload.disableSync===!1?(API.Storage.setBucket(instanceName,"SYNC"),self.mergeLocalWithSynced()):API.Storage.setBucket(instanceName,"LOCAL")})}})});